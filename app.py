import streamlit as st
import pandas as pd
import requests
import ta
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import yfinance as yf
import numpy as np
import time

# –¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º
st.set_page_config(page_title=">tS|TQTVLSYSTEM", layout="wide", initial_sidebar_state="collapsed")
st.markdown("""
<style>
    .stApp {
        background-color: #000000;
        color: #ffffff;
    }
    .stMetric > label {
        color: #ffffff;
    }
    .stSelectbox > label {
        color: #ffffff;
    }
    .stButton > button {
        background-color: #1f1f1f;
        color: #ffffff;
        border-color: #ffffff;
    }
</style>
""", unsafe_allow_html=True)

# API –∫–ª—é—á –∏ Telegram —Ç–æ–∫–µ–Ω
ALPHA_VANTAGE_API_KEY = st.secrets.get("ALPHA_VANTAGE_API_KEY", "NFNQC9SQK6XF7CY3")
TELEGRAM_BOT_TOKEN = st.secrets.get("TELEGRAM_BOT_TOKEN", None)
ADMIN_KEY = st.secrets.get("ADMIN_KEY", "mysecretkey123")

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)
def fetch_stock_data_cached(ticker, interval="1d", period="1y"):
    try:
        stock = yf.Ticker(ticker)
        df = stock.history(period=period, interval=interval)
        if not df.empty:
            df = df[["Close", "Volume", "High", "Low"]]
            return df
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ yfinance –¥–ª—è {ticker}: {str(e)}")
    return None

@st.cache_data(ttl=300)
def fetch_crypto_data(coin_id, days=365):
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart?vs_currency=usd&days={days}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        df = pd.DataFrame({
            'Date': pd.to_datetime([x[0]/1000 for x in data['prices']], unit='s'),
            'Close': [x[1] for x in data['prices']],
            'Volume': [x[1] for x in data['total_volumes']],
            'High': [x[1] for x in data['prices']],
            'Low': [x[1] for x in data['prices']]
        })
        df.set_index('Date', inplace=True)
        return df
    return None

@st.cache_data(ttl=300)
def fetch_stock_fundamentals(ticker):
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        return {
            "pe_ratio": info.get("trailingPE", None),
            "eps": info.get("trailingEps", None),
            "debt_equity": info.get("debtToEquity", None),
            "roe": info.get("returnOnEquity", None),
            "market_cap": info.get("marketCap", None),
            "beta": info.get("beta", None),
            "atr": stock.history(period="1mo")['High'].subtract(stock.history(period="1mo")['Low']).rolling(14).mean().iloc[-1]
        }
    except:
        return {"pe_ratio": None, "eps": None, "debt_equity": None, "roe": None, "market_cap": None, "beta": None, "atr": None}

def analyze_strategy_day_trade(df_list, market):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –≤ Xynth: —Ü–µ–Ω–∞ >$10, ATR 2-5%, –æ–±—ä–µ–º >2M, –±–µ—Ç–∞ >1.2, —Ç–æ–ø-15 –ø–æ cap
    filtered = []
    for ticker, df in df_list:
        if df is None or len(df) < 30:
            continue
        latest_price = df['Close'].iloc[-1]
        if latest_price < 10:
            continue
        atr_pct = (df['High'].subtract(df['Low']).rolling(14).mean().iloc[-1] / latest_price) * 100
        if not (2 <= atr_pct <= 5):
            continue
        avg_volume = df['Volume'].rolling(10).mean().iloc[-1]
        if avg_volume < 2e6:
            continue
        fundamentals = fetch_stock_fundamentals(ticker)
        beta = fundamentals.get("beta", 1.0)
        if beta <= 1.2:
            continue
        filtered.append((ticker, df, latest_price, atr_pct, avg_volume, beta, fundamentals.get("market_cap", 0)))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ cap
    filtered.sort(key=lambda x: x[6], reverse=True)
    top_15 = filtered[:15]
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = go.Figure()
    atr_data = [x[3] for x in filtered]
    fig.add_trace(go.Histogram(x=atr_data, name="ATR%", nbinsx=20))
    fig.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ATR%", xaxis_title="ATR %", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π", template="plotly_dark")
    st.plotly_chart(fig, use_container_width=True)
    
    # –û—Ç—á–µ—Ç
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è", len(df_list))
        st.metric("–ü–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞", len(filtered))
    with col2:
        st.metric("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR >5%)", sum(1 for x in filtered if x[3] > 5))
        st.metric("–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR 2‚Äì5%)", sum(1 for x in filtered if 2 <= x[3] <= 5))
    
    st.subheader("üîë –ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏")
    st.write("‚Ä¢ –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–∫—Ü–∏–π –∏–º–µ—é—Ç ATR 3-6%. –î–∏–∞–ø–∞–∑–æ–Ω 2-5% ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —É–º–µ—Ä–µ–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.")
    st.write("‚Ä¢ –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (7 –∞–∫—Ü–∏–π), –£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏ (3), –§–∏–Ω–∞–Ω—Å—ã (3).")
    
    st.subheader("üèÜ –ü—è—Ç—å –ª—É—á—à–∏—Ö –∞–∫—Ü–∏–π")
    top_df = pd.DataFrame([
        {"–ê–∫—Ü–∏—è": x[0], "Cap ($T)", x[6]/1e12, "ATR %": x[3], "–ë–µ—Ç–∞": x[5]} for x in top_15[:5]
    ])
    st.table(top_df)
    
    st.subheader("–ß—Ç–æ –¥–∞–ª—å—à–µ?")
    next_steps = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", [
        "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏", 
        "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"
    ])
    if next_steps == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        ticker = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é", [x[0] for x in top_15])
        df = next((x[1] for x in top_15 if x[0] == ticker), None)
        if df is not None:
            fig = go.Figure(data=[go.Candlestick(x=df.index, open=df['Close'], high=df['High'], low=df['Low'], close=df['Close'])])
            fig.update_layout(title=f"–°–≤–µ—á–∏ {ticker}", template="plotly_dark")
            st.plotly_chart(fig, use_container_width=True)
    
    return "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"

def analyze_strategy_undervalued(df_list, market):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö: P/E <15, EPS >0, Debt/Equity <0.5
    filtered = []
    for ticker, df in df_list:
        if df is None or len(df) < 30:
            continue
        fundamentals = fetch_stock_fundamentals(ticker)
        pe = fundamentals.get("pe_ratio")
        eps = fundamentals.get("eps")
        debt = fundamentals.get("debt_equity")
        if pe and pe < 15 and eps and eps > 0 and debt and debt < 0.5:
            filtered.append((ticker, df, pe, eps, debt))
    
    # –¢–æ–ø –ø–æ ROE
    top_10 = sorted(filtered, key=lambda x: fetch_stock_fundamentals(x[0]).get("roe", 0), reverse=True)[:10]
    
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è", len(df_list))
    st.metric("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ P/E<15, EPS>0, Debt<0.5", len(filtered))
    
    st.subheader("üèÜ –¢–æ–ø-10 –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π")
    top_df = pd.DataFrame([
        {"–ê–∫—Ü–∏—è": x[0], "P/E": x[2], "EPS": x[3], "Debt/Equity": x[4]} for x in top_10
    ])
    st.table(top_df)
    
    st.subheader("–ß—Ç–æ –¥–∞–ª—å—à–µ?")
    next_steps = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–ü–æ—Ä—Ç—Ñ–µ–ª—å"])
    if next_steps == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        ticker = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é", [x[0] for x in top_10])
        df = next((x[1] for x in top_10 if x[0] == ticker), None)
        if df is not None:
            fig = go.Figure(data=[go.Candlestick(x=df.index, open=df['Close'], high=df['High'], low=df['Low'], close=df['Close'])])
            fig.update_layout(title=f"–°–≤–µ—á–∏ {ticker}", template="plotly_dark")
            st.plotly_chart(fig, use_container_width=True)
    
    return "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"

# Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
st.title("üöÄ >tS|TQTVLSYSTEM")
st.subheader("AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ üìà")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
admin_key = st.text_input("üîç –ê–¥–º–∏–Ω-–∫–ª—é—á (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)", type="password")
is_admin = admin_key == ADMIN_KEY

if is_admin:
    with st.expander("üîç –û—Ç–ª–∞–¥–∫–∞"):
        # –û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞
        st.write("–û—Ç–ª–∞–¥–∫–∞ –≥–æ—Ç–æ–≤–∞")

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (—Å–∫—Ä–∏–ø—Ç–∞)
strategy = st.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (—Å–∫—Ä–∏–ø—Ç)", [
    "–î–Ω–µ–≤–Ω–∞—è –¢–æ—Ä–≥–æ–≤–ª—è", "–ü–æ–∏—Å–∫ –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π", "–ò–≥—Ä–∞ —Å –¥–æ—Ö–æ–¥–∞–º–∏", "–¢–æ—Ä–≥–æ–≤–ª—è –æ–ø—Ü–∏–æ–Ω–∞–º–∏"
])
market = st.selectbox("üíπ –†—ã–Ω–æ–∫", ["–ê–∫—Ü–∏–∏", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"])

if st.button(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {strategy}"):
    if market == "–ê–∫—Ü–∏–∏":
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 50 –∞–∫—Ü–∏–π
        df_list = []
        for ticker in stock_tickers[:50]:
            df = fetch_stock_data_cached(ticker)
            if df is not None:
                df_list.append((ticker, df))
    else:
        df_list = []
        for coin in crypto_ids[:50]:
            df = fetch_crypto_data(coin)
            if df is not None:
                df_list.append((coin, df))
    
    if strategy == "–î–Ω–µ–≤–Ω–∞—è –¢–æ—Ä–≥–æ–≤–ª—è":
        result = analyze_strategy_day_trade(df_list, market)
    elif strategy == "–ü–æ–∏—Å–∫ –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π":
        result = analyze_strategy_undervalued(df_list, market)
    else:
        st.info(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ '–î–Ω–µ–≤–Ω–∞—è –¢–æ—Ä–≥–æ–≤–ª—è' –¥–ª—è —Ç–µ—Å—Ç–∞.")
    
    st.success(result)

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
if 'strategy' in locals():
    next_action = st.selectbox("–ß—Ç–æ –¥–∞–ª—å—à–µ?", [
        "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏", 
        "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"
    ])
    if next_action == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        ticker = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, META)")
        if ticker:
            df = fetch_stock_data_cached(ticker, interval="5m", period="3d") if market == "–ê–∫—Ü–∏–∏" else fetch_crypto_data(ticker, days=3)
            if df is not None:
                fig = go.Figure(data=[go.Candlestick(x=df.index, open=df['Close'], high=df['High'], low=df['Low'], close=df['Close'])])
                fig.update_layout(title=f"5-–º–∏–Ω —Å–≤–µ—á–∏ {ticker} –∑–∞ 3 –¥–Ω—è", template="plotly_dark")
                st.plotly_chart(fig, use_container_width=True)
                
                # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                support = df['Low'].rolling(20).min().iloc[-1]
                resistance = df['High'].rolling(20).max().iloc[-1]
                st.write(f"üõ°Ô∏è **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**: ${support:.2f}")
                st.write(f"üéØ **–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ**: ${resistance:.2f}")

# Telegram
chat_id_input = st.text_input("üì¨ Chat ID –¥–ª—è –æ—Ç—á–µ—Ç–∞")
if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    message = f"üöÄ –û—Ç—á–µ—Ç –ø–æ {strategy}\nüìä –¢–æ–ø-–∞–∫—Ç–∏–≤—ã: {', '.join([x[0] for x in df_list[:5]])}"
    result = send_telegram_report(chat_id_input, message)
    st.write(result)

st.write("üîì –ü—Ä–µ–º–∏—É–º: –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –≥—Ä–∞—Ñ–∏–∫–∏.")
