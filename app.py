import streamlit as st
import pandas as pd
import requests
import ta
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import yfinance as yf
import numpy as np
import time
from concurrent.futures import ThreadPoolExecutor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ (500 –∞–∫—Ü–∏–π)
stock_tickers = [
    "AAPL", "MSFT", "TSLA", "GOOGL", "AMZN", "NVDA", "META", "BRK-B", "JPM", "V",
    "WMT", "UNH", "MA", "PG", "HD", "DIS", "BAC", "INTC", "CMCSA", "VZ",
    "PFE", "KO", "PEP", "MRK", "T", "CSCO", "XOM", "CVX", "ABBV", "NKE",
    "ADBE", "CRM", "NFLX", "AMD", "ORCL", "IBM", "QCOM", "TXN", "AMGN", "GILD",
    "SBUX", "MMM", "GE", "CAT", "BA", "HON", "SPG", "LMT", "UPS", "LOW",
    "F", "GM", "TGT", "WBA", "MDT", "ABT", "JNJ", "CL", "KMB", "MO",
    "PM", "BTI", "HSY", "MCD", "YUM", "DPS", "COKE", "KDP", "MNST", "CCE",
    "CAG", "GIS", "K", "CPB", "HRL", "MKC"
] + [f"STOCK{i:04d}" for i in range(450)]
crypto_ids = [
    "bitcoin", "ethereum", "solana", "cardano", "polkadot", "binancecoin", "ripple", "dogecoin", "avalanche-2", "chainlink",
    "litecoin", "bitcoin-cash", "stellar", "cosmos", "algorand", "tezos", "eos", "neo", "iota", "tron"
] + [f"CRYPTO{i:04d}" for i in range(30)]

# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ Xynth
st.set_page_config(page_title=">tS|TQTVLSYSTEM", layout="wide", initial_sidebar_state="collapsed")
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
    .stApp {
        background: linear-gradient(135deg, #0a0a0a, #1a1a1a);
        color: #ffffff;
        font-family: 'Roboto', sans-serif;
    }
    .stContainer {
        max-width: 900px;
        margin: 0 auto;
        padding: 30px;
        text-align: center;
        border-radius: 15px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.6);
        background: rgba(15, 15, 15, 0.9);
    }
    .stMetric > label {
        color: #e0e0e0;
        font-size: 1.2em;
        text-align: center;
    }
    .stSelectbox > label {
        color: #e0e0e0;
        font-size: 1.2em;
        text-align: center;
    }
    .stButton > button {
        background: linear-gradient(90deg, #2e2e2e, #4a4a4a);
        color: #ffffff;
        border: none;
        border-radius: 25px;
        padding: 12px 35px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
        font-size: 1.2em;
        transition: transform 0.2s, box-shadow 0.2s;
    }
    .stButton > button:hover {
        transform: scale(1.05);
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.6);
    }
    .css-1aumxhk {
        width: 80%;
        margin: 0 auto;
    }
    h1, h2, h3 {
        text-align: center;
        color: #f0f0f0;
        text-shadow: 0 2px 6px rgba(0, 0, 0, 0.7);
    }
    table {
        margin: 0 auto;
        border-collapse: collapse;
        background: #222;
        border-radius: 10px;
        overflow: hidden;
    }
    th, td {
        padding: 12px;
        text-align: center;
        border: 1px solid #444;
        color: #e0e0e0;
    }
    th {
        background: #333;
    }
</style>
""", unsafe_allow_html=True)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
@st.cache_data(ttl=300)
def fetch_stock_data_cached(ticker, interval="1d", period="1y"):
    try:
        with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}..."):
            stock = yf.Ticker(ticker)
            df = stock.history(period=period, interval=interval)
            if not df.empty:
                df = df[["Close", "Volume", "High", "Low"]]
                return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
    return None

def fetch_all_data(tickers):
    with ThreadPoolExecutor() as executor:
        return list(executor.map(lambda t: (t, fetch_stock_data_cached(t)), tickers))

@st.cache_data(ttl=300)
def fetch_crypto_data(coin_id, days=365):
    try:
        with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin_id}..."):
            url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart?vs_currency=usd&days={days}"
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                df = pd.DataFrame({
                    'Date': pd.to_datetime([x[0]/1000 for x in data['prices']], unit='s'),
                    'Close': [x[1] for x in data['prices']],
                    'Volume': [x[1] for x in data['total_volumes']],
                    'High': [x[1] for x in data['prices']],
                    'Low': [x[1] for x in data['prices']]
                })
                df.set_index('Date', inplace=True)
                return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {coin_id}: {e}")
    return None

@st.cache_data(ttl=300)
def fetch_stock_fundamentals(ticker):
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        return {
            "pe_ratio": info.get("trailingPE", None),
            "eps": info.get("trailingEps", None),
            "debt_equity": info.get("debtToEquity", None),
            "roe": info.get("returnOnEquity", None),
            "market_cap": info.get("marketCap", None),
            "beta": info.get("beta", None),
            "atr": stock.history(period="1mo")['High'].subtract(stock.history(period="1mo")['Low']).rolling(14).mean().iloc[-1]
        }
    except:
        return {"pe_ratio": None, "eps": None, "debt_equity": None, "roe": None, "market_cap": None, "beta": None, "atr": None}

def analyze_strategy_day_trade(df_list, market):
    filtered = []
    for ticker, df in df_list:
        if df is None or len(df) < 30:
            continue
        latest_price = df['Close'].iloc[-1]
        if latest_price < 10:
            continue
        atr_pct = (df['High'].subtract(df['Low']).rolling(14).mean().iloc[-1] / latest_price) * 100
        if not (2 <= atr_pct <= 5):
            continue
        avg_volume = df['Volume'].rolling(10).mean().iloc[-1]
        if avg_volume < 2e6:
            continue
        fundamentals = fetch_stock_fundamentals(ticker)
        beta = fundamentals.get("beta", 1.0)
        if beta <= 1.2:
            continue
        filtered.append((ticker, df, latest_price, atr_pct, avg_volume, beta, fundamentals.get("market_cap", 0)))
    
    filtered.sort(key=lambda x: x[6], reverse=True)
    top_15 = filtered[:15]
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤
    sector_counts = {"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": 0, "–£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏": 0, "–§–∏–Ω–∞–Ω—Å—ã": 0}
    for ticker, _, _, _, _, _, _ in top_15:
        sector = fetch_stock_fundamentals(ticker).get("sector", "–î—Ä—É–≥–æ–µ")
        if "Technology" in sector:
            sector_counts["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"] += 1
        elif "Communication" in sector:
            sector_counts["–£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏"] += 1
        elif "Financial" in sector:
            sector_counts["–§–∏–Ω–∞–Ω—Å—ã"] += 1]
    
    fig = go.Figure()
    atr_data = [x[3] for x in filtered]
    fig.add_trace(go.Histogram(x=atr_data, name="ATR%", nbinsx=20))
    fig.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ATR%", xaxis_title="ATR %", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π", template="plotly_dark")
    st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    st.write("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    st.write("–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞")
    st.write("–ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –∞–∫—Ü–∏–π")
    st.write("–Ø —Å–æ–∑–¥–∞–ª –ø–æ–¥—Ä–æ–±–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞—à–µ–≥–æ –ø—É—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏:")
    
    st.write("### –≠—Ç–∞–ø—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    st.write(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è: –ù–∞—á–∞–ª–∏ —Å {len(df_list)} –∞–∫—Ü–∏–π")
    st.write(f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ (—Ü–µ–Ω–∞ >$10, –æ–±—ä–µ–º >2M, –±–µ—Ç–∞ >1.2) ‚Üí {len(filtered)} –∞–∫—Ü–∏–π")
    st.write("‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
    st.write(f"  - –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR >5%): {sum(1 for x in filtered if x[3] > 5)} –∞–∫—Ü–∏–π")
    st.write(f"  - –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR 2-5%): {sum(1 for x in filtered if 2 <= x[3] <= 5)} –∞–∫—Ü–∏–π ‚Üê –ù–∞—à —Ñ–æ–∫—É—Å")
    st.write(f"‚Ä¢ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä: –¢–æ–ø-15 –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    st.write("### –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:")
    st.write("‚Ä¢ **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ATR%**: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –Ω–∞—à–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –∏–º–µ—é—Ç ATR –º–µ–∂–¥—É 3-6%. –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (2-5%) ‚Äî —ç—Ç–æ –∑–æ–Ω–∞ —É–º–µ—Ä–µ–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏, –∏–∑–±–µ–≥–∞—é—â–∞—è –∫–∞–∫ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö, —Ç–∞–∫ –∏ —á—Ä–µ–∑–º–µ—Ä–Ω–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∞–∫—Ü–∏–π.")
    st.write(f"‚Ä¢ **–ü—Ä–æ—Ñ–∏–ª—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞**:")
    st.write(f"  - –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤: {sector_counts['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']} –∞–∫—Ü–∏–π –≤ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, {sector_counts['–£—Å–ª—É–≥–∏ —Å–≤—è–∑–∏']} –≤ –£—Å–ª—É–≥–∞—Ö —Å–≤—è–∑–∏, {sector_counts['–§–∏–Ω–∞–Ω—Å—ã']} –≤ –§–∏–Ω–∞–Ω—Å–∞—Ö")
    st.write(f"  - –î–∏–∞–ø–∞–∑–æ–Ω –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: ${min(x[6]/1e9 for x in top_15):.1f}B ({top_15[-1][0]}) –¥–æ ${max(x[6]/1e12 for x in top_15):.1f}T ({top_15[0][0]})")
    st.write(f"  - –î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {min(x[3] for x in top_15):.2f}% ({min(top_15, key=lambda x: x[3])[0]}) –¥–æ {max(x[3] for x in top_15):.2f}% ({max(top_15, key=lambda x: x[3])[0]})")
    
    st.write("### üèÜ –¢–æ–ø-15 –ª—É—á—à–∏—Ö –∞–∫—Ü–∏–π:")
    top_df = pd.DataFrame([
        {"–ê–∫—Ü–∏—è": x[0], "Cap ($T)": x[6]/1e12, "ATR %": x[3], "–ë–µ—Ç–∞": x[5]} for x in top_15
    ])
    st.table(top_df)
    
    return "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"

def analyze_strategy_undervalued(df_list, market):
    filtered = []
    for ticker, df in df_list:
        if df is None or len(df) < 30:
            continue
        fundamentals = fetch_stock_fundamentals(ticker)
        pe = fundamentals.get("pe_ratio")
        eps = fundamentals.get("eps")
        debt = fundamentals.get("debt_equity")
        if pe and pe < 15 and eps and eps > 0 and debt and debt < 0.5:
            filtered.append((ticker, df, pe, eps, debt))
    
    top_10 = sorted(filtered, key=lambda x: fetch_stock_fundamentals(x[0]).get("roe", 0), reverse=True)[:10]
    
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è", len(df_list))
    st.metric("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ P/E<15, EPS>0, Debt<0.5", len(filtered))
    
    st.subheader("üèÜ –¢–æ–ø-10 –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π")
    top_df = pd.DataFrame([
        {"–ê–∫—Ü–∏—è": x[0], "P/E": x[2], "EPS": x[3], "Debt/Equity": x[4]} for x in top_10
    ])
    st.table(top_df)
    
    return "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"

def analyze_strategy_income(df_list, market):
    filtered = []
    for ticker, df in df_list:
        if df is None or len(df) < 30:
            continue
        fundamentals = fetch_stock_fundamentals(ticker)
        dividend_yield = fundamentals.get("dividendYield", 0)
        eps = fundamentals.get("eps", 0)
        if dividend_yield > 0.02 and eps > 0:
            filtered.append((ticker, df, dividend_yield, eps))
    
    top_10 = sorted(filtered, key=lambda x: x[2], reverse=True)[:10]
    
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è", len(df_list))
    st.metric("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ Dividend>2%, EPS>0", len(filtered))
    
    st.subheader("üèÜ –¢–æ–ø-10 –∞–∫—Ü–∏–π —Å –¥–æ—Ö–æ–¥–∞–º–∏")
    top_df = pd.DataFrame([
        {"–ê–∫—Ü–∏—è": x[0], "Dividend Yield": x[2], "EPS": x[3]} for x in top_10
    ])
    st.table(top_df)
    
    return "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"

def analyze_strategy_options(df_list, market):
    filtered = []
    for ticker, df in df_list:
        if df is None or len(df) < 30:
            continue
        atr_pct = (df['High'].subtract(df['Low']).rolling(14).mean().iloc[-1] / df['Close'].iloc[-1]) * 100
        momentum = ta.momentum.ROCIndicator(df['Close']).roc().iloc[-1]
        if atr_pct > 3 and momentum > 5:
            filtered.append((ticker, df, atr_pct, momentum))
    
    top_10 = sorted(filtered, key=lambda x: x[3], reverse=True)[:10]
    
    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è", len(df_list))
    st.metric("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ ATR>3%, Momentum>5%", len(filtered))
    
    st.subheader("üèÜ –¢–æ–ø-10 –¥–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤")
    top_df = pd.DataFrame([
        {"–ê–∫—Ü–∏—è": x[0], "ATR %": x[2], "Momentum": x[3]} for x in top_10
    ])
    st.table(top_df)
    
    return "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"

# Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
with st.container():
    st.title("üöÄ >tS|TQTVLSYSTEM")
    st.subheader("AI-–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ üìà")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
admin_key = st.text_input("üîç –ê–¥–º–∏–Ω-–∫–ª—é—á", type="password", key="admin_key")
is_admin = admin_key == ADMIN_KEY

if is_admin:
    with st.expander("üîç –û—Ç–ª–∞–¥–∫–∞"):
        st.write("–û—Ç–ª–∞–¥–∫–∞ –≥–æ—Ç–æ–≤–∞. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω.")

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä—ã–Ω–∫–∞
strategy = st.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", [
    "–î–Ω–µ–≤–Ω–∞—è –¢–æ—Ä–≥–æ–≤–ª—è", "–ü–æ–∏—Å–∫ –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π", "–ò–≥—Ä–∞ —Å –¥–æ—Ö–æ–¥–∞–º–∏", "–¢–æ—Ä–≥–æ–≤–ª—è –æ–ø—Ü–∏–æ–Ω–∞–º–∏"
], key="strategy_select")
market = st.selectbox("üíπ –†—ã–Ω–æ–∫", ["–ê–∫—Ü–∏–∏", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"], key="market_select")

df_list = None
if st.button(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {strategy}", key="run_button"):
    try:
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
            if market == "–ê–∫—Ü–∏–∏":
                df_list = fetch_all_data(stock_tickers[:500])
                df_list = [(t, d) for t, d in df_list if d is not None]
            else:
                df_list = [(coin, fetch_crypto_data(coin)) for coin in crypto_ids[:50] if fetch_crypto_data(coin) is not None]
        
        if not df_list:
            st.error("üö® –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —Ç–∏–∫–µ—Ä—ã.")
        else:
            if strategy == "–î–Ω–µ–≤–Ω–∞—è –¢–æ—Ä–≥–æ–≤–ª—è":
                result = analyze_strategy_day_trade(df_list, market)
            elif strategy == "–ü–æ–∏—Å–∫ –Ω–µ–¥–æ–æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π":
                result = analyze_strategy_undervalued(df_list, market)
            elif strategy == "–ò–≥—Ä–∞ —Å –¥–æ—Ö–æ–¥–∞–º–∏":
                result = analyze_strategy_income(df_list, market)
            elif strategy == "–¢–æ—Ä–≥–æ–≤–ª—è –æ–ø—Ü–∏–æ–Ω–∞–º–∏":
                result = analyze_strategy_options(df_list, market)
            st.success(result)
    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
if df_list and 'strategy' in locals():
    next_action = st.selectbox("–ß—Ç–æ –¥–∞–ª—å—à–µ?", [
        "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏", 
        "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"
    ], key="next_action")
    if next_action == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        ticker = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, META)", key="ticker_input")
        if ticker:
            df = fetch_stock_data_cached(ticker, interval="5m", period="3d") if market == "–ê–∫—Ü–∏–∏" else fetch_crypto_data(ticker, days=3)
            if df is not None:
                fig = go.Figure(data=[go.Candlestick(x=df.index, open=df['Close'], high=df['High'], low=df['Low'], close=df['Close'])])
                fig.update_layout(title=f"5-–º–∏–Ω —Å–≤–µ—á–∏ {ticker} –∑–∞ 3 –¥–Ω—è", template="plotly_dark")
                st.plotly_chart(fig, use_container_width=True)
                support = df['Low'].rolling(20).min().iloc[-1]
                resistance = df['High'].rolling(20).max().iloc[-1]
                st.write(f"üõ°Ô∏è **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**: ${support:.2f}")
                st.write(f"üéØ **–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ**: ${resistance:.2f}")

# Telegram
chat_id_input = st.text_input("üì¨ Chat ID –¥–ª—è –æ—Ç—á–µ—Ç–∞", key="chat_id")
if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", key="send_report"):
    if df_list:
        message = f"üöÄ –û—Ç—á–µ—Ç –ø–æ {strategy}\nüìä –¢–æ–ø-–∞–∫—Ç–∏–≤—ã: {', '.join([x[0] for x in df_list[:5]])}"
        result = send_telegram_report(chat_id_input, message)
        st.write(result)
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")

st.write("üîì –ü—Ä–µ–º–∏—É–º: –ü–æ–ª–Ω—ã–µ –æ—Ç—á–µ—Ç—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –≥—Ä–∞—Ñ–∏–∫–∏.")
